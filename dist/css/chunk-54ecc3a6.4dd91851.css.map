{"version":3,"sources":["webpack:///src/components/_Core/Navigation/src/components/_Core/Navigation/GxTabs.vue"],"names":[],"mappings":"AAuJA,mDACA,YACA,CACA,yBACA,uCAAA,CACA,0BAAA,CACA,gBACA,CACA,4BACA,gBACA,CACA,mCACA,iDAAA,CAAA,yCACA","file":"chunk-54ecc3a6.4dd91851.css","sourcesContent":["<script>\nexport default {\n  name: 'GxTabs',\n  props: {\n    initialTab: {\n      type: [Number, String],\n      default: 0,\n    },\n    tabs: {\n      type: Array,\n      default: () => [],\n    },\n    isGray: {\n      type: Boolean,\n      default: false,\n    },\n    noSelectedBlack: {\n      type: Boolean,\n      default: false,\n    },\n    skipScrollIntoView: {\n      type: Boolean,\n      default: false,\n    },\n    fixed: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      active: this.initialTab,\n      hasOffset: false,\n    }\n  },\n  computed: {\n    activeIndex() {\n      if (this.tabs && this.active) {\n        return this.tabs.findIndex((tab) => tab.name === this.active)\n      }\n      return 0\n    },\n  },\n  watch: {\n    initialTab(newVal) {\n      this.active = newVal\n    },\n  },\n  // mounted() {\n  //   if (this.$mq === 'mo') {\n  //     this.hasScroll()\n  //     if (this.initialTab !== 0 && !this.skipScrollIntoView) {\n  //       this.$refs[this.initialTab].scrollIntoView({ inline: 'start' })\n  //     }\n  //   }\n  // },\n  methods: {\n    hasScroll() {\n      const tabsDiv = document.getElementById('tabsScroll')\n      const tabsWidthScroll = tabsDiv.scrollWidth\n      const tabsWidth = tabsDiv.clientWidth\n      if (tabsWidthScroll > tabsWidth) {\n        this.hasOffset = true\n      }\n    },\n    activateTab(tab, evt) {\n      if (this.$mq === 'mo') {\n        const tabSelected = this.$refs[tab.name][0]\n        tabSelected.scrollIntoView({\n          inline: 'center',\n          block: 'nearest',\n          behavior: 'smooth',\n        })\n      }\n      this.active = tab.name\n      this.$emit('activeTab', tab.name)\n    },\n  },\n}\n</script>\n\n<template>\n  <div>\n    <MqLayout mq=\"mo\" class=\"gxTabs\" v-on=\"$listeners\">\n      <div\n        id=\"tabsScroll\"\n        class=\"h-full flex items-start w-full overflow-scroll whitespace-no-wrap no-scroll-bar cursor-pointer\"\n        :class=\"{ fixed: fixed }\"\n      >\n        <a\n          v-for=\"(tab, index) in tabs\"\n          :ref=\"tab.name\"\n          :key=\"tab.name\"\n          class=\"flex-grow flex-1 inline-block px-8 flex justify-center items-center bg-white pt-4 pb-2\"\n          :class=\"{\n            'border-primary border-b-2': active === tab.name && !isGray,\n            'text-black border-black border-b-2': active === tab.name && isGray,\n            'pl-20': hasOffset && index === 0,\n            'gx-shadow-bottom': fixed,\n          }\"\n          @click=\"activateTab(tab, $event)\"\n        >\n          <i\n            v-if=\"tab.icon\"\n            class=\"material-icons\"\n            :class=\"{\n              'text-primary': active === tab.name && !isGray,\n              'text-secondary': active !== tab.name && !isGray,\n              'text-black': active === tab.name && isGray,\n              'text-gray-500': active !== tab.name && isGray,\n            }\"\n            >{{ tab.icon }}</i\n          >\n          <p\n            v-if=\"tab.label\"\n            class=\"uppercase\"\n            :class=\"{\n              'text-primary': active === tab.name && !isGray,\n              'text-secondary': active !== tab.name && !isGray,\n              'text-black': active === tab.name && isGray,\n              'text-black': active !== tab.name && noSelectedBlack,\n              'text-gray-500': active !== tab.name && isGray,\n            }\"\n            >{{ tab.label }}</p\n          >\n        </a>\n      </div>\n    </MqLayout>\n    <component\n      :is=\"tabs[activeIndex].component\"\n      v-if=\"$mq === 'mo' && tabs[activeIndex].component\"\n    />\n    <MqLayout mq=\"de\">\n      <ul class=\"flex justify-start h-full leading-none\">\n        <li\n          v-for=\"tab in tabs\"\n          :key=\"tab.name\"\n          :class=\"{\n            'border-primary text-primary border-b-2': active === tab.name,\n            'border-gray-200 border-b-2': active !== tab.name,\n          }\"\n          class=\"de:gx-overline px-2  h-full whitespace-no-wrap uppercase cursor-pointer text-center gxTabDesk flex-grow pb-2\"\n          @click=\"activateTab(tab, $event)\"\n        >\n          {{ tab.label }}\n        </li>\n      </ul>\n    </MqLayout>\n  </div>\n</template>\n<style scoped>\n.no-scroll-bar::-webkit-scrollbar {\n  display: none;\n}\n.gxTabs {\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n  font-size: 0.75rem;\n}\n.gxTabDesk {\n  min-width: 8.7rem;\n}\n.gx-shadow-bottom {\n  box-shadow: 0 5px 5px -5px rgba(0, 0, 0, 0.16);\n}\n</style>\n"]}